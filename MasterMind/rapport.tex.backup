\documentclass[a4paper,twoside,12pt]{report}
\usepackage[utf8x]{inputenc}
\usepackage{color}
\usepackage{fancyvrb} % pour mettre les verbatim dans des boites
%\usepackage[dvipdf]{graphics}
\usepackage[pdftex]{graphicx}
\usepackage{fancyhdr}
\usepackage{listings}
\usepackage{float}
\usepackage{listingsutf8}
\usepackage[T1]{fontenc}
\usepackage[french]{babel}
\usepackage{textcomp}
\usepackage[toc,page]{appendix} 
%\usepackage{hyperref}
% Quelques rÃ©glages particuliers
\oddsidemargin=-0.1in %xx
\evensidemargin=-0.1in
\textwidth=6.1in
\topmargin=-0.5in
\textheight=8.7in
\parskip 0.25in
\lstset{
language=caml, frameround = fttt, frame=single, showspaces=false, showstringspaces=false, breaklines=true
}
\fancyhead[RO,RE]{\includegraphics[width=0.5in]{Logo-univ-orleans.png}}
\fancyhead[CO,CE]{Rapport de projet}
\fancyhead[LO,LE]{Jeu de Taquin}
\fancyfoot[C]{2015}
\fancyfoot[RO, LE] {\thepage}
\fancyfoot[LO, RE] {MEKHILEF W., RETY M.}
%
%Quelques macros
\newcommand{\moncode}[1]{\begin{center}
                        \lstinputlisting[inputencoding=utf8/latin1]{#1}
                        \end{center}}

\newcommand{\monimage}[3]{
\par\noindent
\begin{figure}[H] %on ouvre l'environnement figure
\begin{center}
\includegraphics[width=0.9\textwidth]{#1} %ou image.png, .jpeg etc.
\caption{#2} %la lÃ©gende
\label{#3} %l'Ã©tiquette pour faire rÃ©fÃ©rence Ã  cette image
\end{center}
\end{figure} %on ferme l'environnement figure
}

\newcommand{\ml}[0]{\par\noindent}

%\hyphenation{supplÃ©mentaires}{sup-pl\'e-men-tai-res}
%opening
\title{\textcolor{blue}{\Large Rapport du projet IF06}\\\textcolor{blue}{\Large Jeu de Mastermind}}
\vskip 1cm
\author{MEKHILEF Wissame, RETY Martin \date{\today}}


\begin{document}

\thispagestyle{empty}
%
\begin{figure}[H]
\includegraphics[width=0.2\linewidth]{Logo-univ-orleans.png}
% \hfill

\end{figure}
\vspace{2cm}
%
\begin{center}
{\Huge Licence 2 Informatique\\\ \\Rapport du projet IF01}
\par\vspace{1.4cm}

{\Huge\bf \textcolor{red}{\bf Jeu de Mastermind}}
\par\vspace{1.6cm}

{\Large Realise par:}
\par\vspace{1.3cm}
{\large\bf \textcolor{blue}{MEKHILEF Wissame, RETY Martin}}
\vfill
\today
\end{center}
\newpage
\pagestyle{fancy}

\begin{abstract}
%
\end{abstract}
 
\newpage
\tableofcontents
\listoffigures
\newpage

\chapter{Developpement general}
% 
\section{Evolution du projet}
% 
\par
Nous avons débuté ce projet en réfléchissant aux différentes manières d'aborder la création des combinaison des couleurs. Deux choix étaient possible, créer les combinaisons à partir de type string ou bien de créer nous même un type couleur. Nous avons alors opté pour créer un type somme couleur avec comme constructeur toutes les couleurs proposées dans le sujet. 
\par
Après avoir créé ce type couleur nous avons directement commencer à faire la fonction de construction de la liste de combinaison avec redondance, nous avions dans l'idée de créer la liste sans redondance avec cette liste et une fonction de comparaison. Nous avons alors commencé à programmer ces fonctions en binome. Martin s'est occupé de faire la fonction de création de la liste avec redondances et Wissame celle sans redondances, nous avons fait cela tout en gardant un oiel sur le travail de l'autre pour comprendre les fonctions et pouvoir les utiliser.
\par 
Ensuite nous nous sommes concerter sur la réalisation de la fonction d'élagage de la liste grâce aux indications. Nous avonc tester plusieurs façons de la réaliser mais la plupart ne permettaient pas la gestion de tous les cas, nous sommes donc partis sur une fonction d'élagage qui compare les indications de l'utilisateur et les indications de la combinaison à tester faite par d'autres fonctions. Pour faire ces fonctions nous avons travailler en binome.
\par
Pour finir, nous avons créer la fonction qui permet de jouer au Mastermind ainsi que le menu de jeu. Nous avons directement implanter la gestion des exceptions de tricherie et d'erreurs de saisies. Ensuite nous avons souhaiter améliorer la projet en ajoutant un module, contenant toutes les fonctions définies qui sont utilisées dans la fonction jouer. Pour se faire, nous avons réparti le travail, Martin s'est chargé de la fonction jouer et du module, quant à Wissame, il s'est occupé du menu, de la gestion des exceptions et de quelques améliorations.
\section{Outils utilise}
% 
Pour faire ce projet nous avons utilisé:
\begin{itemize}
\item Emacs avec le mode Tuareg pour programmer et tester nos fonctions
\item GitHub pour partager nos fichiers et faire avancer notre code
\item Skype pour discuter et travailler sur le projet
\item LaTex pour écrire notre rapport
\item Internet pour faire des recherches sur les manières de résolutions d'un mastermind et de la documentation sur Ocaml.
\end{itemize}

\chapter{Analyse des fonctions}
%
\moncode{listCouleur.mli}
%
\section{Construction des listes}
%
\moncode{construc.ml}
\subsection{Création de la liste avec redondance}
\par
La fonction construction\_ListR permet de construire la liste des combinaisons avec redondances, celle-ci possède 2 paramètres:
\begin{itemize}
\item taille, la taille des combinaisons
\item listC, la liste des couleurs possibles
\end{itemize}
\par
Elle possède une fonction auxiliaire construire\_aux qui prend en paramètre une liste.
La fonction principale et auxiliaire sont toutes deux récursives, la récursion et le matching de la fonction principale permet:
\begin{itemize}
\item Pour le cas de la liste de taille 1 : l'appel à listC qui permet d'initialiser la liste.
\item Pour le reste des cas: l'accumulation des appels de construire\_aux en fonction de la taille (grâce à l'appel: construire\_aux( construire\_ListR (taille-1) listC))
\end{itemize}
\par Quant à la fonction auxiliaire, celle-ci permet d'ajouter chacune des couleurs possibles sur tous les élements de la liste placée en paramètre ( (Rouge::h)::(Bleu::h) ...). 
\par Grâce à cette double récursion la création de la liste est très efficace malgré les 32768 cas à produire pour une combinaison de taille 5.
\subsection{Exemple:}
%
\par
construire\_ListR 1 listeCouleur;;
\par renvoie la listC
\par construire\_ListR 2 listeCouleur;;
\par renvoie [[Rouge;Rouge];[Bleu;Rouge];[Vert;Rouge];[Noir;Rouge];[Jaune;Rouge];[Orange;Rouge];[Violet;Rouge];[Blanc;Rouge];[Rouge;Bleu];[Bleu;Bleu];[Vert;Bleu]...
\par construire\_ListR 3 listeCouleur;;
\par renvoie la liste construite par constuire\_aux (construire\_aux(construire\_list 1 listeCouleur))
\subsection{Création de la liste sans redondance}
\par
Pour créer cette liste nous avons besoin d'une fonction de comparaison compList prenant en paramètre une liste et qui renvoie un booléen:
\begin{itemize}
\item Vrai, si l'élément comparé de la liste n'apparait pas dans le reste de cette liste
\item Faux, sinon
\end{itemize}
Ensuite pour la création de la liste, la fonction prend 2 paramètres:
\begin{itemize}
\item list, qui correspond à la liste complète des combinaisons possibles
\item comp, le comparateur défini juste avant
\end{itemize}
\par
Cette fonction utilise une fonction auxiliare aux prenant en paramètre une liste et le résultat des précédentes éxécutions. Elle consiste à tester chaque élément  de la liste avec le comparateur, suivant le prédicat not (comp h),  et ensuite les rajouter ou non dans la liste res.
\section{Elagage}
%\moncode{elag.ml} 
\par
Pour faire cette fonction d'élagage nous avons besoin de plusieurs fonctions:
\begin{itemize}
\item suppression, prenant en paramètre un élément e et une liste l. cette fonction permet de supprimer la 1ère occurence de l'élément e de la liste l
\item pions\_communs, prenant en paramètre 2 listes l1 et l2. Elle permet de renvoyer le nombre de pions communs entre ces 2 listes. Cette fonction utilise suppression pour surpprimer les élements de l1 appartenant aussi à l2, ensuite renvoie la longueur de la liste l2 moins la longueur de l2 avec application de la fonction auxiliaire
\item pions\_biens\_places, prenant 2 listes l1 et l2 en paramètre. Elle compare les élements de même ordre dans les 2 listes et renvoie le nombre des éléments identiques de ces 2 listes.
\item indications, prenant 2 listes l1 et l2, celle-ci appelle les 2 fonctions précédentes et renvoie le couple (bp,mp) (sachant qu'il faut réduire mp avec bp)
\end{itemize}
\par
Avec toutes ces fonctions, il suffit de faire la fonction elagage, prenant en paramètre comb (la combinasion de comparaison), ind (les indications de l'utilisateur) et l (la liste des combinaisons à réduire). Cette fonction renvoie la liste de combinaison qui respecte le prédicat suivant: (indications comb h) =ind , c'est-à-dire que l'élément h à tester possède le meme couple (bp,mp) que comb. Cette fonction est assez efficace quand bp ou mp est assez élévé mais prend plus de temps quand ceux-ci valent 0 ou 1 (la fonction doit alors inspecter plus en détails la liste).

%
\section{Fonction joue}
%
\moncode{mastermind.mli}
%
\moncode{jouer.ml}
%
\par
La fonction jouer est seulement l'application de diverse fonction, exception ou d'affichage en fonction des paramètre quelle possède, ceux-ci sont  le nombre de coup disponible et la liste sur laquelle on travaille. Cette fonction utilise une autre fonction auxiliare permettant simplement l'ajout du nombre coup n éxéctuer pour le moment. Les différents cas de la fonction jouer sont :
\begin{itemize}
\item \_,[]-> ce cas correspond à une tricherie car la liste n'est vide seulement dans le cas ou l'utlisateur rentre de mauvaise indication, l'ordinateur supprime alors tous les cas existants
\item x,[h] -> affiche la bonne combinaison car il ne reste plus qu'un seul élément dans la liste
\item x,\_ quand x est supérieur à nbcoup et différent de 0 -> celle-ci indique que l'ordinateur à perdu car il n'a plus de coup disponible
\item x,\_ -> le dernier cas qui permet l'affichage de la proposition de l'ordinateur, l'entrée des informations de l'utilisateur (tout en ayant une gestion d'erreur de saisie) et l'application de l'élagage sur la liste avec les indications de l'utilisateur et la dernière proposition de l'ordinateur ( aux (x+1) (ListCouleur.elagage prop (bm,mp) l))
\end{itemize}
\subsection{Fonction restante}
\par
Il reste quelque fonction à définir:
\begin{itemize}	
\item print\_list, celle-ci permet simplement l'affichage sur terminal d'une liste de couleur
\item menu, prenant en paramètre les 2 types de liste de combinaison (avec/sans redondance). Celle-ci permet le choix du mode (matching), la gestion des exceptions d'erreur de saisie et de tricherie (try/with) et une récursion permettant la rejouabilité du programme
\item main(), faisant juste l'appel du menu ave c les 2 types de liste 
\end{itemize}
\chapter{Exemples et Conclusion}
%
\section{Conclusion et réponse à la question subsidiaire}
\par Nous avons essayé d'appliquer toutes les notions vues en cours, c'est-à-dire favoriser les matching, utiliser un module et essayer de faire des fonctions récursive terminales.
\par Pour répondre à la question subsidaire, qui était de pouvoir répérer si l'utilisateur triche, celle-ci est gérée dans la fonction jouer qui est compatible avec toutes les versions. Pour se faire il suffit de tester si la liste des possibilités est vide après élagage, si oui alors l'utilisateur à donner des indications erronées sinon la jeu peut continuer. Il existe un autre cas qui consiste à tester si la solution de l'ordinateur et si la combinaison cachée de l'utilisateur sont les même, mais cela implique que l'ordinateur connaisse la bonne réponse et de rentrer la combinaison caché avant de jouer. Pour pouvoir faire cela il suffit juste rajouter des entrées our construire la solution et ensuite tester lorsque qu'il n'y a plus qu'un élément dans la liste si celui-ci correspond à cette solution. Toutefois nous n'avons pas implémenter cette option car nous ne savions pas si celui-ci concordait avec le sujet et car normalement seul l'utilisateur connait la solution.

\chapter*{Quelques exemples}
Quelques exemples d'execution suivant les versions, l'implatation de la triche ne sera pas montré à chaque fois.

\section*{Version 1 : Sans redondance}
Le code couleur choisi au début du jeu à été : Rouge, Vert, Blanc, Violet, Bleu.
\monimage{mode1sanstriche.png}{Exemple pour le premier mode sans triche}{M1ST}

\section*{Version 2 : Avec redondance}

Le code couleur choisi au début de cette partie à été : Violet, Violet, Blanc, Blanc, Blanc.
\monimage{mode2sanstriche_1.png}{Exemple pour le deuxième mode sans triche}{M2ST}
\monimage{mode2sanstriche_2.png}{Exemple pour le deuxième mode sans triche}{M2ST}

\section*{Versions 3 : Coup limité}

Le nombre de coups choisi pour cette partie à été 3 avec pour combinaisons : Rouge, Vert, Blanc, Violet, Bleu. L'exemple ci-dessous illsutre
une partie perdu par la machine.
\monimage{mode3perdu.png}{Exemple pour la troisième versions}{M3P}

\section*{Implémentation de la triche}
L'exemple suivant est sur la base de la premiere versions. Le code choisi est le même, les informations données lors des deux premiers essais
sont volontairement énronées pour permettre une dectection rapide de la triche par la machine.
\monimage{mode1avectriche}{Exemple de la detection de la triche}{M2AT}
\end{document}
